Para começar esse projeto vamos precisar de alguns comandos essenciais para o node:

É importante que o pnpm esteja instalado

- pnpm i express
- pnpm i typescript
- pnpm i eslint
- pnpm add -D @types/express
- pnpm add -D ts-node-dev
- pnpm add typescript
- pnpm i cors
- pnpm add -D @types/cors
- pnpm i dotenv
- pnpm i mongoose
- pnpm i ZOD

Para associar o banco ao back
Criar o arquivo .env e buscar no mongoDB a url do database, lembrando que a url
vai ter um local onde colocar uma senha que deve ser gerada em database access.

Criar a pasta config
e os arquivos enviroment.ts e connection.ts.

Esses dois arquivos serão a porta de entrada do banco na nossa aplicação.

Criar a pasta ts, dentro delas mais duas pastas a interfaces e a types
e criar dois arquivos, o index.ts, o user.interfaces.ts
onde vamos codar o que sera necessario para preencher os dados do usuario.

Depois criaremos a pasta schemas e o arquivo user.schema.ts, para tratar 
do banco de dados
para isso precisaremos adicionar o ZOD que ja foi instalado acima
os proximos passos sao criar as models e os repositorios para uso no banco.
as middlewares vem para validações
e entao podemos partir para a controller

Criar a pasta controllers e os arquivos index.ts e user.controller.ts.
Na controller que vamos passar todos os parametros para serem executados no banco
como mostrar (get) os usuarios, criar novos (post) alterar os dados (pactch),
alterar dado unico (put) e deletar o usuario (delete).

para completar precisamos de mais dois arquivos criados na pasta raiz do projeto
o routes.ts e o index.ts, esses dois são responsaveis pelas coneções, juntamente
com o connect e o environment na pasta config.

Diante disso os parametros passados para o arquivo routes, é a rota da controller.
importaremos a controller e colocaremos ela com a rota /users.

No index.ts nós usaremos o cors, que tambem ja foi instalado acima, precisamos
instalar e adicionar os tipos do cors tambem. No caso do index referenciamos as routes,
colocados no routes.ts, e importamos o connect e o environment para puxarmos todos
os dados que preenchemos do banco, para entao estartamos o projeto, usando um codigo,
proveniente do express que é o express.urlencode e o express.json, para fazer com que
a api seja codificada como um projeto json.

a partir desse momento precisamos começar com o svelte com o npm create svelte@latest
